import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;


public class Memo extends JFrame implements ActionListener{ //0706-2 이어서 0707-1 swing
	//메뉴바에 각각 메뉴 담고, 그 메뉴안에 메뉴아이템
	
   //파일메뉴
   JMenuBar mb = new JMenuBar();
      JMenu fileMenu= new JMenu("파일");
         JMenuItem newMenuItem= new JMenuItem("새글");
         JMenuItem openMenuItem= new JMenuItem("열기");
         JMenuItem saveMenuItem= new JMenuItem("저장");
         JMenuItem endMenuItem= new JMenuItem("종료");
   //편집메뉴
      JMenu editMenu = new JMenu("편집");
         JMenuItem cutMenuItem= new JMenuItem("오려두기");
         JMenuItem copyMenuItem= new JMenuItem("복사하기");
         JMenuItem pasteMenuItem= new JMenuItem("붙여넣기");
   //실행메뉴
      JMenu runMenu = new JMenu("실행");
         JMenuItem chromeMenuItem = new JMenuItem("엣지");
         JMenuItem editplusMenuItem= new JMenuItem("에디트플러스");
   
   //텍스트 필드
   JTextArea ta= new JTextArea();
   JScrollPane sp = new JScrollPane(ta);
   
   static String buffer; 
   
   
   public Memo() {
	  //메뉴바는 add가 아니라 set
      setJMenuBar(mb);
      mb.add(fileMenu); mb.add(editMenu); mb.add(runMenu);
      
      //메뉴아이템 붙여주기
      fileMenu.add(newMenuItem); fileMenu.add(openMenuItem); fileMenu.add(saveMenuItem);
      fileMenu.addSeparator();
      fileMenu.add(endMenuItem);
      
      editMenu.add(cutMenuItem); editMenu.add(copyMenuItem); editMenu.add(pasteMenuItem); 
      
      runMenu.add(chromeMenuItem); runMenu.add(editplusMenuItem);
      
      add(sp);
      
      //단축키 설정
      setShortCut();
      
      //기본
      setSize(700,700);
      setVisible(true);
      setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      
      //액션리스너 추가해주기
      newMenuItem.addActionListener(this);
      openMenuItem.addActionListener(this);
      saveMenuItem.addActionListener(this);
      endMenuItem.addActionListener(this);
      
      cutMenuItem.addActionListener(this);
      copyMenuItem.addActionListener(this);
      pasteMenuItem.addActionListener(this);
      
      chromeMenuItem.addActionListener(this);
      editplusMenuItem.addActionListener(this);
   
   }
   
   @Override
   public void actionPerformed(ActionEvent ae) {
	   Object event = ae.getSource();
	   
	   if (event==newMenuItem) {
		   ta.setText("");
	   }
	   else if(event==openMenuItem) {
		   fileOpen();
	   }
	   else if (event==saveMenuItem) {
		   fileSave();
	   }
	   else if (event==endMenuItem) {
		   System.exit(0);
	   }
	   else if (event==cutMenuItem) {
		   stringCut();
	   }
	   else if (event==copyMenuItem) {
		   stringCopy();
	   }
	   else if (event==pasteMenuItem) {
		   stringPaste();
	   }
	   else if (event==chromeMenuItem) {
		   processStart("C://Program Files (x86)/Microsoft/Edge/Application/msedge.exe");
	   }
	   else if (event==editplusMenuItem) {
		   processStart("C://Program Files/EditPlus/editplus.exe");
	   }
   	
   }
   
   //외부파일 실행하기
   public void processStart(String url) {
	   Runtime runtime = Runtime.getRuntime();
	   try {
		   runtime.exec(url);
		   //() 안에 바로 주소를 넣어도 되지만, 우리는 에딧플러스랑 엣지 둘다 있으니까 비워서 채워넣기
	   }
	   catch(Exception e) {}
   }
   
   //복사하기
   public void stringCopy() {
	   buffer = ta.getSelectedText();
   }
   
   //붙여넣기
   public void stringPaste() {
	 //buffer변수에 있는 문자를 커서가 있는 곳에 변경
	   ta.replaceSelection(buffer);
   }
   
   
   //오려두기
   public void stringCut() {
	   //선택영역의 문자를  buffer변수에 보관하고
	   buffer = ta.getSelectedText();
	   //선택영역의 문자를 지워야한다.
	   ta.replaceSelection("");
   }
   
   //파일 저장
   public void fileSave() {
	 //파일을 여는 컴퍼넌트						//처음 시작 위치
	   JFileChooser fc = new JFileChooser(new File("D://javaSrc"));
	   int state = fc.showSaveDialog(this);
	   
	   if(state==0) { //0:저장, 1:취소
		   try {
			   File ff = fc.getSelectedFile();
			   FileWriter fw = new FileWriter(ff);
			   fw.write(ta.getText());
			   fw.close();
		   }
		   catch(IOException e) {
			   System.out.println(e.getMessage());
		   }
	   }
   }
   
   //파일 열기
   public void fileOpen() {
	   //파일을 여는 컴퍼넌트						//처음 시작 위치
	   JFileChooser fc = new JFileChooser(new File("D://javaSrc"));
	   
	   //파일을 여러개 한번에 선택 가능하도록 설정하기
	   //true : 다중선택, false : 하나만 선택
	   fc.setMultiSelectionEnabled(true);
	   
	   //필터링 (파일명)									//(m,n1.n2,...) -> m:필터명 n:필터에 보일 확장자명
	   FileFilter filter = new FileNameExtensionFilter("자바(*.java)","java","Java","JAVA");
	   fc.setFileFilter(filter);
	   FileFilter filter2 = new FileNameExtensionFilter("클래스","class");
	   fc.setFileFilter(filter2);
	   
	   int choose = fc.showOpenDialog(this);
	   if(choose==0) { //열기0, 취소1
		   try {
			   
			 
			   //이전에 표시된 내용은 지우기
			   ta.setText("");
			   
			 //파일 여러개 여는 경우는 주석처리
			   //선택한 파일경로와 파일명을 얻어오기
			   File f = fc.getSelectedFile();
			   FileReader fr = new FileReader(f);
			   BufferedReader br = new BufferedReader(fr);
			   while(true) {
				   String inData = br.readLine();
				   if(inData==null) break;
				   ta.append(inData+"\n");
			   }
			   
			   //파일 여러개 여는 경우
//			   File[] f = fc.getSelectedFiles();
//			   for(File ff : f) {
//				   FileReader fr = new FileReader(ff);
//				   BufferedReader br = new BufferedReader(fr);
//				   while(true) {
//					   String txt = br.readLine();
//					   if(txt==null) break;
//					   ta.append(txt+"\n");
//				   }
//				   ta.append("-------------------------------------------------------------\n");
//			   }
		   }
		   catch (Exception e) {
			   e.printStackTrace();
		   }
		   
	   }
   }
   
   //단축키 설정하기
   public void setShortCut() {
	   
	   //종료 : 단축키로 사용할 키 E
	   //1. 메뉴에 단축키로 사용할 키 셋팅
	   endMenuItem.setMnemonic(KeyEvent.VK_E);
	   //2. mask 키 설정									//단축키			,Mask		
	   endMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E,ActionEvent.CTRL_MASK));
	   
	   
   }

   public static void main(String[] args) {
         new Memo();

   }

}